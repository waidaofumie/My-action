name: Build-Golang-Project
on:
  workflow_dispatch:
  schedule:
        - cron: 0 0 * * *

jobs:
  Gogs:
    name: Build Gogs
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6
    - name: Use Node.js 14.15.3
      uses: actions/setup-node@v2
      with:
        node-version: 14.15.3
    - name: Clone Gogs From Github and Build
      if: success()
      run: |
        git clone https://github.com/gogs/gogs.git
        sudo apt update -qq
        sudo apt install -qq upx libpam0g-dev
        cd gogs
        node -v
        go version
        go build -tags "sqlite pam cert" -o gogs
    - name: UPX Binary Files to Reduce Size.
      if: success()
      run: |
        cd gogs
        upx -9 gogs -q
    - name: Upload Flies to Github Actions
      uses: actions/upload-artifact@v2
      if: success()
      with:
       name: Gogs
       path: gogs/gogs       
    - name: Upload Gogs's Binary Files to Main Download Station.
      if: success()
      run: |
        cd gogs
        zip -o Gogs.zip gogs
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/Linux/Gogs" -F "file=@Gogs.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}
        # curl --socks5 ${{ secrets.PROXY_ADDR }} -U ${{ secrets.PROXY_USER }} -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/ALL/Gogs" -F "file=@Gogs.zip" ${{ secrets.CN_STATION_PROCESSOR }}

  Gitea:
    name: Build Gitea
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6
    - name: Use Node.js 14.15.3
      uses: actions/setup-node@v2
      with:
        node-version: 14.15.3
    - name: Clone Gitea From Github and Build
      run: |
        git clone https://github.com/go-gitea/gitea.git
        cd gitea
        node -v
        go version
        TAGS="bindata sqlite sqlite_unlock_notify" make build
    - name: UPX Binary Files to Reduce Size.
      if: success()
      run: |
        cd gitea
        upx -9 gitea -q
    - name: Upload Flies to Github Actions
      uses: actions/upload-artifact@v2
      if: success()
      with:
       name: Gitea
       path: gitea/gitea
    - name: Upload Gitea's Binary Files to Main Download Station.
      if: success()
      run: |
        cd gitea
        zip -o Gitea.zip gitea
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/Linux/Gitea" -F "file=@Gitea.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}
        # curl --socks5 ${{ secrets.PROXY_ADDR }} -U ${{ secrets.PROXY_USER }} -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/ALL/Gitea" -F "file=@Gitea.zip" ${{ secrets.CN_STATION_PROCESSOR }}

  Nps:
    name: Build Nps
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6
    - name: Clone Nps From Github and Build
      run: |
        git clone https://github.com/ehang-io/nps.git
        cd nps
        go version
        bash <(curl -fsSL https://raw.githubusercontent.com/1orz/My-action/master/Golang-Project/Nps/build.sh) 
    - name: Upload Flies to Github Actions
      uses: actions/upload-artifact@v2
      if: success()
      with:
       name: Nps
       path: nps/*.tar.gz
    - name: Upload Nps's Binary Files to Main Download Station.
      if: success()
      run: |
        cd nps
        zip -r -o Nps.zip . -i *.tar.gz
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/Linux/Nps" -F "file=@Nps.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}
        # curl --socks5 ${{ secrets.PROXY_ADDR }} -U ${{ secrets.PROXY_USER }} -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/ALL/Nps" -F "file=@Nps.zip" ${{ secrets.CN_STATION_PROCESSOR }}

  Frp:
    name: Build Frp
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.15.6
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6
    - name: Clone Frp From Github and Build
      run: |
        git clone https://github.com/fatedier/frp.git
        cd frp
        go version
        bash package.sh
    - name: Upload Flies to Github Actions
      uses: actions/upload-artifact@v2
      if: success()	
      with:	
       name: Frp	
       path: frp/release/packages/	
    - name: Upload Frp's Binary Files to Main Download Station.	
      if: success()	
      run: |	
        cd frp/release/packages
        zip -r -o Frp.zip .
        curl -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/Linux/Frp" -F "file=@Frp.zip" ${{ secrets.MAIN_UPLOAD_PROCESSOR }}
        # curl --socks5 ${{ secrets.PROXY_ADDR }} -U ${{ secrets.PROXY_USER }} -F "token=${{ secrets.UPLOAD_TOKEN }}" -F "location=Software/ALL/Frp" -F "file=@Frp.zip" ${{ secrets.CN_STATION_PROCESSOR }}


